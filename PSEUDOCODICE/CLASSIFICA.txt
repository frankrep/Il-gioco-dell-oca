aggiornare_classifica_top_10

DATI DI INPUT
file_classifica_top_10, contiene record di tipo vincitore corrispondenti ai dieci migliori giocatori di sempre, file di tipo binario
vincitore_partita, vincitore della partita appena conclusa di cui confrontare il numero di lanci per verificarne l'inserimento, record di tipo vincitore 
partita_attuale, la partita da cui leggere la lunghezza del percorso relativa alla vittoria di vincitore_partita, record di tipo partita

DATI DI OUTPUT
file_classifica_top_10, file della classifica eventualmente aggiornato con l'inserimento di vincitore_partita, file di tipo binario

DATI DI LAVORO
inserito, indica se il vincitore è stato già inserito in classifica oppure no, booleano, = VERO (il vincitore è stato inserito all'interno della classifica), = FALSO (il vincitore non è stato inserito in classifica)
indice_vincitori, indice di spostamento all'interno l'array di vincitori, intero, >0
vincitori, elenco dei dieci migliori giocatori di partite , array a una dimensione (NUMERO_MASSIMO_CLASSIFICATI) di vincitore
rateo_vincitore_partita, rapporto tra i lanci dei dadi e la lunghezza del percorso del vincitore della partita, intero
rateo_classificato, rapporto tra i lanci dei dadi e la lunghezza del percorso del vincitore già presente già in classifica, intero

ALGORITTMO
vincitori = caricare_classifica (file_classifica_top_10)
inserito = FALSO
indice_vincitori = 1               
rateo_vincitore_partita = leggere_numero_lanci_vincitore(vincitore_partita) / leggere_lunghezza_percorso_vincitore(vincitore_partita)
MENTRE ( indice_vincitori <= NUMERO_MASSIMO_CLASSIFICATI )
    rateo_classificato= leggere_numero_lanci_vincitore(Elemento in posizione indice_vincitori di vincitori) / leggere_lunghezza_percorso_vincitore(Elemento in posizione indice_vincitori di vincitori)

        SE (rateo_vincitore_partita <= rateo_classificato) AND (inserito != 1)
        ALLORA
                vincitori = spostamento_destra_vincitori(vincitori, indice_vincitori, vincitore_partita)
                inserito = 1

                indice_vincitore = 1
                MENTRE (indice_vincitore <= NUMERO_MASSIMO_CLASSIFICATI)
                        file_classifica_top_10 = scrivere_file(file_classifica_top_10, Elemento in posizione indice_vincitore di vincitori)
                        indice_vincitore = indice_vincitore + 1
                FINE
        FINE
        indice_vincitori = indice_vincitori + 1
FINE



spostamento_destra_vincitori

DATI DI INPUT
vincitori, elenco da spostare verso destra, Array ad una dimensione (NUMERO_MASSIMO_CLASSIFICATI) di vincitore
posizione_inserimento, posizione all'interno di vincitori in cui inserire il nuovo giocatore, intero, > 0
vincitore_partita, giocatore da aggiungere in vincitori, record di tipo vincitore
NUMERO_MASSIMO_CLASSIFICATI, numero massimo di giocatori di cui è composta la classifica, intero, = 10

DATI DI OUTPUT
vincitori, elenco spostato verso destra con vincitore_partita inserito in posizione_inserimento, Array ad una dimensione (NUMERO_MASSIMO_CLASSIFICATI) di vincitore

DATI DI LAVORO
vincitore_salvato, contiene il prossimo vincitore da inserire, record di tipo vincitore

ALGORITMO
MENTRE (posizione_inserimento <= NUNMERO_MASSIMO_CLASSIFICATI)
        giocatore_salvato = elemento di vincitori in posizione posizione_inserimento
        elemento di vincitori in posizione posizione_inserimento = giocatore_attuale
        giocatore_attuale = giocatore_salvato
        posizione_inserimento = posizione_inserimento + 1
FINE



caricare_classifica 

DATI DI INPUT
file_classifica_top_10, contiene record di tipo giocatore corrispondenti ai dieci migliori giocatori di sempre, file di tipo binario
NUMERO_MASSIMO_CLASSIFICATI, il numero massimo dei giocatori in classifica, Intero, = 10

DATI DI OUTPUT
vincitori, i giocatori vincitori presenti nel file della classifica, Array ad una dimensione (NUMERO_MASSIMO_CLASSIFICATI) di vincitore

DATI DI LAVORO
indice_vincitore, indica lo spostamento all'interno di vincitori, intero, > 0, <= NUMERO_MASSIMO_CLASSIFICATI

ALGORITMO
indice_vincitore = 1
MENTRE (indice_vincitore <= NUMERO_MASSIMO_CLASSIFICATI)
        Elemento in posizione indice_vincitore di vincitori = leggere_da_file (file_classifica_top_10)
        indice_vincitore = indice_vincitore + 1
FINE